/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, HostListener } from '@angular/core';
var ImporteDirective = /** @class */ (function () {
    function ImporteDirective(el) {
        this.el = el;
        // Allow decimal numbers and negative values
        this.regex = new RegExp(/^-?[0-9]+(\.[0-9]*){0,1}$/g);
        // Allow key codes for special events. Reflect :
        // Backspace, tab, end, home
        this.specialKeys = ['Backspace', 'Tab', 'End', 'Home', '-', 'ArrowLeft', 'ArrowRight'];
    }
    /**
     * @param {?} event
     * @return {?}
     */
    ImporteDirective.prototype.onKeyDown = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var current = this.el.nativeElement.value;
        // Autocompletar decimal
        if (event.key === '.') {
            if (current.length === 0) {
                event.target.value = '0.';
                event.preventDefault();
                return;
            }
            else if (current === '-') {
                event.target.value = '-0.';
                event.preventDefault();
                return;
            }
        }
        // No permitir otro menos que no sea al principio
        if (event.key === '-' && current.length > 0) {
            event.preventDefault();
        }
        // Allow Backspace, tab, end, and home keys
        if (this.specialKeys.indexOf(event.key) !== -1) {
            return;
        }
        // No permitir mÃ¡s de 2 decimales
        if (current.indexOf('.') !== -1) {
            /** @type {?} */
            var decimales = current.split('.')[1];
            if (decimales.length > 1) {
                event.preventDefault();
            }
        }
        /** @type {?} */
        var next = current.concat(event.key);
        if (next && !String(next).match(this.regex)) {
            event.preventDefault();
        }
    };
    ImporteDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[trImporte]'
                },] }
    ];
    /** @nocollapse */
    ImporteDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    ImporteDirective.propDecorators = {
        onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
    };
    return ImporteDirective;
}());
export { ImporteDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ImporteDirective.prototype.regex;
    /**
     * @type {?}
     * @private
     */
    ImporteDirective.prototype.specialKeys;
    /**
     * @type {?}
     * @private
     */
    ImporteDirective.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1wb3J0ZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdHJlcy1lcnJlcy9uZ3gtdXRpbHMvIiwic291cmNlcyI6WyJsaWIvaW1wb3J0ZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVwRTtJQUtDLDBCQUNTLEVBQWM7UUFBZCxPQUFFLEdBQUYsRUFBRSxDQUFZOztRQUlmLFVBQUssR0FBVyxJQUFJLE1BQU0sQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDOzs7UUFJekQsZ0JBQVcsR0FBa0IsQ0FBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLFdBQVcsRUFBRSxZQUFZLENBQUUsQ0FBQztJQVB2RyxDQUFDOzs7OztJQVVMLG9DQUFTOzs7O0lBRFQsVUFDVSxLQUFVOztZQUNiLE9BQU8sR0FBVyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxLQUFLO1FBRW5ELHdCQUF3QjtRQUN4QixJQUFJLEtBQUssQ0FBQyxHQUFHLEtBQUssR0FBRyxFQUFFO1lBQ3RCLElBQUksT0FBTyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7Z0JBQ3pCLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztnQkFDMUIsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO2dCQUN2QixPQUFPO2FBQ1A7aUJBQU0sSUFBSSxPQUFPLEtBQUssR0FBRyxFQUFFO2dCQUMzQixLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7Z0JBQzNCLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztnQkFDdkIsT0FBTzthQUNQO1NBQ0Q7UUFFRCxpREFBaUQ7UUFDakQsSUFBSSxLQUFLLENBQUMsR0FBRyxLQUFLLEdBQUcsSUFBSSxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUM1QyxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7U0FDdkI7UUFFRCwyQ0FBMkM7UUFDM0MsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7WUFDL0MsT0FBTztTQUNQO1FBRUQsaUNBQWlDO1FBQ2pDLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTs7Z0JBQzFCLFNBQVMsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN2QyxJQUFJLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUN6QixLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7YUFDdkI7U0FDRDs7WUFFSyxJQUFJLEdBQVcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDO1FBQzlDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDNUMsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1NBQ3ZCO0lBQ0YsQ0FBQzs7Z0JBdkRELFNBQVMsU0FBQztvQkFDVixRQUFRLEVBQUUsYUFBYTtpQkFDdkI7Ozs7Z0JBSm1CLFVBQVU7Ozs0QkFrQjVCLFlBQVksU0FBQyxTQUFTLEVBQUUsQ0FBRSxRQUFRLENBQUU7O0lBeUN0Qyx1QkFBQztDQUFBLEFBekRELElBeURDO1NBdERZLGdCQUFnQjs7Ozs7O0lBTzVCLGlDQUFpRTs7Ozs7SUFJakUsdUNBQTJHOzs7OztJQVIxRyw4QkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEhvc3RMaXN0ZW5lciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ARGlyZWN0aXZlKHtcblx0c2VsZWN0b3I6ICdbdHJJbXBvcnRlXSdcbn0pXG5leHBvcnQgY2xhc3MgSW1wb3J0ZURpcmVjdGl2ZSB7XG5cblx0Y29uc3RydWN0b3IoXG5cdFx0cHJpdmF0ZSBlbDogRWxlbWVudFJlZlxuXHQpIHsgfVxuXG5cdC8vIEFsbG93IGRlY2ltYWwgbnVtYmVycyBhbmQgbmVnYXRpdmUgdmFsdWVzXG5cdHByaXZhdGUgcmVnZXg6IFJlZ0V4cCA9IG5ldyBSZWdFeHAoL14tP1swLTldKyhcXC5bMC05XSopezAsMX0kL2cpO1xuXG5cdC8vIEFsbG93IGtleSBjb2RlcyBmb3Igc3BlY2lhbCBldmVudHMuIFJlZmxlY3QgOlxuXHQvLyBCYWNrc3BhY2UsIHRhYiwgZW5kLCBob21lXG5cdHByaXZhdGUgc3BlY2lhbEtleXM6IEFycmF5PHN0cmluZz4gPSBbICdCYWNrc3BhY2UnLCAnVGFiJywgJ0VuZCcsICdIb21lJywgJy0nLCAnQXJyb3dMZWZ0JywgJ0Fycm93UmlnaHQnIF07XG5cblx0QEhvc3RMaXN0ZW5lcigna2V5ZG93bicsIFsgJyRldmVudCcgXSlcblx0b25LZXlEb3duKGV2ZW50OiBhbnkpIHtcblx0XHRjb25zdCBjdXJyZW50OiBzdHJpbmcgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQudmFsdWU7XG5cblx0XHQvLyBBdXRvY29tcGxldGFyIGRlY2ltYWxcblx0XHRpZiAoZXZlbnQua2V5ID09PSAnLicpIHtcblx0XHRcdGlmIChjdXJyZW50Lmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0XHRldmVudC50YXJnZXQudmFsdWUgPSAnMC4nO1xuXHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9IGVsc2UgaWYgKGN1cnJlbnQgPT09ICctJykge1xuXHRcdFx0XHRldmVudC50YXJnZXQudmFsdWUgPSAnLTAuJztcblx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE5vIHBlcm1pdGlyIG90cm8gbWVub3MgcXVlIG5vIHNlYSBhbCBwcmluY2lwaW9cblx0XHRpZiAoZXZlbnQua2V5ID09PSAnLScgJiYgY3VycmVudC5sZW5ndGggPiAwKSB7XG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblxuXHRcdC8vIEFsbG93IEJhY2tzcGFjZSwgdGFiLCBlbmQsIGFuZCBob21lIGtleXNcblx0XHRpZiAodGhpcy5zcGVjaWFsS2V5cy5pbmRleE9mKGV2ZW50LmtleSkgIT09IC0xKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gTm8gcGVybWl0aXIgbcOhcyBkZSAyIGRlY2ltYWxlc1xuXHRcdGlmIChjdXJyZW50LmluZGV4T2YoJy4nKSAhPT0gLTEpIHtcblx0XHRcdGNvbnN0IGRlY2ltYWxlcyA9IGN1cnJlbnQuc3BsaXQoJy4nKVsxXTtcblx0XHRcdGlmIChkZWNpbWFsZXMubGVuZ3RoID4gMSkge1xuXHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGNvbnN0IG5leHQ6IHN0cmluZyA9IGN1cnJlbnQuY29uY2F0KGV2ZW50LmtleSk7XG5cdFx0aWYgKG5leHQgJiYgIVN0cmluZyhuZXh0KS5tYXRjaCh0aGlzLnJlZ2V4KSkge1xuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH1cblxufVxuIl19