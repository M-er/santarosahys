/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
var NumformPipe = /** @class */ (function () {
    function NumformPipe() {
    }
    /**
     * @param {?} valor
     * @param {?=} borrarceros
     * @param {?=} sepmil
     * @param {?=} sepdec
     * @return {?}
     */
    NumformPipe.prototype.transform = /**
     * @param {?} valor
     * @param {?=} borrarceros
     * @param {?=} sepmil
     * @param {?=} sepdec
     * @return {?}
     */
    function (valor, borrarceros, sepmil, sepdec) {
        if (borrarceros === void 0) { borrarceros = false; }
        if (sepmil === void 0) { sepmil = ','; }
        if (sepdec === void 0) { sepdec = '.'; }
        /** @type {?} */
        var encero = '';
        if (!borrarceros) {
            encero = '0.00';
        }
        if (!valor || isNaN(valor)) {
            valor = 0;
        }
        valor = valor.toString().replace(/\$|\,/g, '');
        if (valor === 0) {
            return encero;
        }
        /** @type {?} */
        var sign = (Number.parseFloat(valor) === Math.abs(Number.parseFloat(valor)));
        valor = Math.abs(Number.parseFloat(valor));
        valor = Math.floor((Number.parseFloat(valor) * 100) + 0.50000000001);
        /** @type {?} */
        var cents = valor % 100;
        if (cents < 10) {
            cents = '0' + cents;
        }
        valor = Math.floor(valor / 100).toString();
        for (var i = 0; i < Math.floor((valor.length - (1 + i)) / 3); i++) {
            valor = valor.substring(0, valor.length - (4 * i + 3)) + sepmil + valor.substring(valor.length - (4 * i + 3));
        }
        return (((sign) ? '' : '-') + valor + sepdec + cents);
    };
    NumformPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'numform'
                },] }
    ];
    return NumformPipe;
}());
export { NumformPipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVtZm9ybS5waXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRyZXMtZXJyZXMvbmd4LXV0aWxzLyIsInNvdXJjZXMiOlsibGliL251bWZvcm0ucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFFcEQ7SUFBQTtJQThCQSxDQUFDOzs7Ozs7OztJQXpCQSwrQkFBUzs7Ozs7OztJQUFULFVBQ0MsS0FBVSxFQUNWLFdBQTRCLEVBQzVCLE1BQW9CLEVBQ3BCLE1BQW9CO1FBRnBCLDRCQUFBLEVBQUEsbUJBQTRCO1FBQzVCLHVCQUFBLEVBQUEsWUFBb0I7UUFDcEIsdUJBQUEsRUFBQSxZQUFvQjs7WUFFaEIsTUFBTSxHQUFHLEVBQUU7UUFDZixJQUFJLENBQUMsV0FBVyxFQUFFO1lBQUUsTUFBTSxHQUFHLE1BQU0sQ0FBQztTQUFFO1FBQ3RDLElBQUksQ0FBQyxLQUFLLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQUUsS0FBSyxHQUFHLENBQUMsQ0FBQztTQUFFO1FBQzFDLEtBQUssR0FBRyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUMvQyxJQUFJLEtBQUssS0FBSyxDQUFDLEVBQUU7WUFBRSxPQUFPLE1BQU0sQ0FBQztTQUFFOztZQUM3QixJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQzlFLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUMzQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsYUFBYSxDQUFDLENBQUM7O1lBQ2pFLEtBQUssR0FBUSxLQUFLLEdBQUcsR0FBRztRQUM1QixJQUFJLEtBQUssR0FBRyxFQUFFLEVBQUU7WUFDZixLQUFLLEdBQUcsR0FBRyxHQUFHLEtBQUssQ0FBQztTQUNwQjtRQUNELEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUMzQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNsRSxLQUFLLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzlHO1FBQ0QsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLEdBQUcsTUFBTSxHQUFHLEtBQUssQ0FBQyxDQUFDO0lBQ3ZELENBQUM7O2dCQTVCRCxJQUFJLFNBQUM7b0JBQ0wsSUFBSSxFQUFFLFNBQVM7aUJBQ2Y7O0lBNEJELGtCQUFDO0NBQUEsQUE5QkQsSUE4QkM7U0EzQlksV0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQFBpcGUoe1xuXHRuYW1lOiAnbnVtZm9ybSdcbn0pXG5leHBvcnQgY2xhc3MgTnVtZm9ybVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcblxuXHR0cmFuc2Zvcm0oXG5cdFx0dmFsb3I6IGFueSxcblx0XHRib3JyYXJjZXJvczogYm9vbGVhbiA9IGZhbHNlLFxuXHRcdHNlcG1pbDogc3RyaW5nID0gJywnLFxuXHRcdHNlcGRlYzogc3RyaW5nID0gJy4nXG5cdCk6IGFueSB7XG5cdFx0bGV0IGVuY2VybyA9ICcnO1xuXHRcdGlmICghYm9ycmFyY2Vyb3MpIHsgZW5jZXJvID0gJzAuMDAnOyB9XG5cdFx0aWYgKCF2YWxvciB8fCBpc05hTih2YWxvcikpIHsgdmFsb3IgPSAwOyB9XG5cdFx0dmFsb3IgPSB2YWxvci50b1N0cmluZygpLnJlcGxhY2UoL1xcJHxcXCwvZywgJycpO1xuXHRcdGlmICh2YWxvciA9PT0gMCkgeyByZXR1cm4gZW5jZXJvOyB9XG5cdFx0Y29uc3Qgc2lnbiA9IChOdW1iZXIucGFyc2VGbG9hdCh2YWxvcikgPT09IE1hdGguYWJzKE51bWJlci5wYXJzZUZsb2F0KHZhbG9yKSkpO1xuXHRcdHZhbG9yID0gTWF0aC5hYnMoTnVtYmVyLnBhcnNlRmxvYXQodmFsb3IpKTtcblx0XHR2YWxvciA9IE1hdGguZmxvb3IoKE51bWJlci5wYXJzZUZsb2F0KHZhbG9yKSAqIDEwMCkgKyAwLjUwMDAwMDAwMDAxKTtcblx0XHRsZXQgY2VudHM6IGFueSA9IHZhbG9yICUgMTAwO1xuXHRcdGlmIChjZW50cyA8IDEwKSB7XG5cdFx0XHRjZW50cyA9ICcwJyArIGNlbnRzO1xuXHRcdH1cblx0XHR2YWxvciA9IE1hdGguZmxvb3IodmFsb3IgLyAxMDApLnRvU3RyaW5nKCk7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBNYXRoLmZsb29yKCh2YWxvci5sZW5ndGggLSAoMSArIGkpKSAvIDMpOyBpKyspIHtcblx0XHRcdHZhbG9yID0gdmFsb3Iuc3Vic3RyaW5nKDAsIHZhbG9yLmxlbmd0aCAtICg0ICogaSArIDMpKSArIHNlcG1pbCArIHZhbG9yLnN1YnN0cmluZyh2YWxvci5sZW5ndGggLSAoNCAqIGkgKyAzKSk7XG5cdFx0fVxuXHRcdHJldHVybiAoKChzaWduKSA/ICcnIDogJy0nKSArIHZhbG9yICsgc2VwZGVjICsgY2VudHMpO1xuXHR9XG5cbn1cbiJdfQ==