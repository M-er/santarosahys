/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, HostListener } from '@angular/core';
var ComprobanteDirective = /** @class */ (function () {
    function ComprobanteDirective(el) {
        this.el = el;
        // Allow decimal numbers and negative values
        this.regex = new RegExp(/^[0-9]$/g);
        // Allow key codes for special events. Reflect :
        // Backspace, tab, end, home
        this.specialKeys = ['Backspace', 'Tab', 'End', 'Home', '-', 'ArrowLeft', 'ArrowRight'];
    }
    /**
     * @param {?} event
     * @return {?}
     */
    ComprobanteDirective.prototype.onKeyDown = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.specialKeys.indexOf(event.key) !== -1) {
            return;
        }
        /** @type {?} */
        var esNumero = String(event.key).match(this.regex);
        /** Si no es tecla especial o número */
        if (!esNumero && event.key !== 'Enter') {
            event.preventDefault();
            return;
        }
        /** @type {?} */
        var current = this.el.nativeElement.value;
        /** @type {?} */
        var next = this.el.nativeElement.value.concat(event.key);
        /**
         * Si está seleccionado, reemplazo
         * @type {?}
         */
        var seleccionado = this.el.nativeElement.selectionStart === 0 && this.el.nativeElement.selectionEnd === current.length && current.length > 0;
        if (seleccionado && esNumero) {
            event.target.value = event.key;
            event.preventDefault();
            return;
        }
        if (next.length > 13 && event.key !== 'Enter') {
            event.preventDefault();
            return;
        }
        if (event.key === 'Enter') {
            /** @type {?} */
            var guion = current.indexOf('-');
            if (guion === -1) {
                event.target.value = '0000-' + '0'.repeat(8 - current.length) + current;
            }
            else {
                /** @type {?} */
                var valor = current.replace('-', '');
                event.target.value = '0'.repeat(4 - valor.substring(0, guion).length) + valor.substring(0, guion) + '-' + '0'.repeat(8 - valor.substring(guion, valor.length).length) + valor.substring(guion, valor.length);
            }
        }
        else if (current.length === 4 && !current.includes('-')) {
            event.target.value = current + '-' + event.key;
            event.preventDefault();
        }
    };
    ComprobanteDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[trComprobante]'
                },] }
    ];
    /** @nocollapse */
    ComprobanteDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    ComprobanteDirective.propDecorators = {
        onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
    };
    return ComprobanteDirective;
}());
export { ComprobanteDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ComprobanteDirective.prototype.regex;
    /**
     * @type {?}
     * @private
     */
    ComprobanteDirective.prototype.specialKeys;
    /**
     * @type {?}
     * @private
     */
    ComprobanteDirective.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcHJvYmFudGUuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRyZXMtZXJyZXMvbmd4LXV0aWxzLyIsInNvdXJjZXMiOlsibGliL2NvbXByb2JhbnRlLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXBFO0lBS0MsOEJBQ1MsRUFBYztRQUFkLE9BQUUsR0FBRixFQUFFLENBQVk7O1FBSWYsVUFBSyxHQUFXLElBQUksTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDOzs7UUFJdkMsZ0JBQVcsR0FBa0IsQ0FBQyxXQUFXLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLFdBQVcsRUFBRSxZQUFZLENBQUMsQ0FBQztJQVByRyxDQUFDOzs7OztJQVVMLHdDQUFTOzs7O0lBRFQsVUFDVSxLQUFVO1FBQ25CLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQy9DLE9BQU87U0FDUDs7WUFFSyxRQUFRLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUVwRCx1Q0FBdUM7UUFDdkMsSUFBSSxDQUFDLFFBQVEsSUFBSSxLQUFLLENBQUMsR0FBRyxLQUFLLE9BQU8sRUFBRTtZQUN2QyxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDdkIsT0FBTztTQUNQOztZQUVLLE9BQU8sR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxLQUFLOztZQUNyQyxJQUFJLEdBQVcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDOzs7OztZQUc1RCxZQUFZLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsY0FBYyxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxZQUFZLEtBQUssT0FBTyxDQUFDLE1BQU0sSUFBSSxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUM7UUFDOUksSUFBSSxZQUFZLElBQUksUUFBUSxFQUFFO1lBQzdCLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUM7WUFDL0IsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1lBQ3ZCLE9BQU87U0FDUDtRQUVELElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLElBQUksS0FBSyxDQUFDLEdBQUcsS0FBSyxPQUFPLEVBQUU7WUFDOUMsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1lBQ3ZCLE9BQU87U0FDUDtRQUVELElBQUksS0FBSyxDQUFDLEdBQUcsS0FBSyxPQUFPLEVBQUU7O2dCQUNwQixLQUFLLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUM7WUFDbEMsSUFBSSxLQUFLLEtBQUssQ0FBQyxDQUFDLEVBQUU7Z0JBQ2pCLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLE9BQU8sR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsT0FBTyxDQUFDO2FBQ3hFO2lCQUFNOztvQkFDQSxLQUFLLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDO2dCQUN0QyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUM3TTtTQUNEO2FBQU0sSUFBSSxPQUFPLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDMUQsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsT0FBTyxHQUFHLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDO1lBQy9DLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztTQUN2QjtJQUNGLENBQUM7O2dCQTFERCxTQUFTLFNBQUM7b0JBQ1YsUUFBUSxFQUFFLGlCQUFpQjtpQkFDM0I7Ozs7Z0JBSm1CLFVBQVU7Ozs0QkFrQjVCLFlBQVksU0FBQyxTQUFTLEVBQUUsQ0FBQyxRQUFRLENBQUM7O0lBNENwQywyQkFBQztDQUFBLEFBNURELElBNERDO1NBekRZLG9CQUFvQjs7Ozs7O0lBT2hDLHFDQUErQzs7Ozs7SUFJL0MsMkNBQXlHOzs7OztJQVJ4RyxrQ0FBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEhvc3RMaXN0ZW5lciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ARGlyZWN0aXZlKHtcblx0c2VsZWN0b3I6ICdbdHJDb21wcm9iYW50ZV0nXG59KVxuZXhwb3J0IGNsYXNzIENvbXByb2JhbnRlRGlyZWN0aXZlIHtcblxuXHRjb25zdHJ1Y3Rvcihcblx0XHRwcml2YXRlIGVsOiBFbGVtZW50UmVmLFxuXHQpIHsgfVxuXG5cdC8vIEFsbG93IGRlY2ltYWwgbnVtYmVycyBhbmQgbmVnYXRpdmUgdmFsdWVzXG5cdHByaXZhdGUgcmVnZXg6IFJlZ0V4cCA9IG5ldyBSZWdFeHAoL15bMC05XSQvZyk7XG5cblx0Ly8gQWxsb3cga2V5IGNvZGVzIGZvciBzcGVjaWFsIGV2ZW50cy4gUmVmbGVjdCA6XG5cdC8vIEJhY2tzcGFjZSwgdGFiLCBlbmQsIGhvbWVcblx0cHJpdmF0ZSBzcGVjaWFsS2V5czogQXJyYXk8c3RyaW5nPiA9IFsnQmFja3NwYWNlJywgJ1RhYicsICdFbmQnLCAnSG9tZScsICctJywgJ0Fycm93TGVmdCcsICdBcnJvd1JpZ2h0J107XG5cblx0QEhvc3RMaXN0ZW5lcigna2V5ZG93bicsIFsnJGV2ZW50J10pXG5cdG9uS2V5RG93bihldmVudDogYW55KSB7XG5cdFx0aWYgKHRoaXMuc3BlY2lhbEtleXMuaW5kZXhPZihldmVudC5rZXkpICE9PSAtMSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvbnN0IGVzTnVtZXJvID0gU3RyaW5nKGV2ZW50LmtleSkubWF0Y2godGhpcy5yZWdleCk7XG5cblx0XHQvKiogU2kgbm8gZXMgdGVjbGEgZXNwZWNpYWwgbyBuw7ptZXJvICovXG5cdFx0aWYgKCFlc051bWVybyAmJiBldmVudC5rZXkgIT09ICdFbnRlcicpIHtcblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y29uc3QgY3VycmVudCA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC52YWx1ZTtcblx0XHRjb25zdCBuZXh0OiBzdHJpbmcgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQudmFsdWUuY29uY2F0KGV2ZW50LmtleSk7XG5cblx0XHQvKiogU2kgZXN0w6Egc2VsZWNjaW9uYWRvLCByZWVtcGxhem8gKi9cblx0XHRjb25zdCBzZWxlY2Npb25hZG8gPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuc2VsZWN0aW9uU3RhcnQgPT09IDAgJiYgdGhpcy5lbC5uYXRpdmVFbGVtZW50LnNlbGVjdGlvbkVuZCA9PT0gY3VycmVudC5sZW5ndGggJiYgY3VycmVudC5sZW5ndGggPiAwO1xuXHRcdGlmIChzZWxlY2Npb25hZG8gJiYgZXNOdW1lcm8pIHtcblx0XHRcdGV2ZW50LnRhcmdldC52YWx1ZSA9IGV2ZW50LmtleTtcblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKG5leHQubGVuZ3RoID4gMTMgJiYgZXZlbnQua2V5ICE9PSAnRW50ZXInKSB7XG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmIChldmVudC5rZXkgPT09ICdFbnRlcicpIHtcblx0XHRcdGNvbnN0IGd1aW9uID0gY3VycmVudC5pbmRleE9mKCctJyk7XG5cdFx0XHRpZiAoZ3Vpb24gPT09IC0xKSB7XG5cdFx0XHRcdGV2ZW50LnRhcmdldC52YWx1ZSA9ICcwMDAwLScgKyAnMCcucmVwZWF0KDggLSBjdXJyZW50Lmxlbmd0aCkgKyBjdXJyZW50O1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y29uc3QgdmFsb3IgPSBjdXJyZW50LnJlcGxhY2UoJy0nLCAnJyk7XG5cdFx0XHRcdGV2ZW50LnRhcmdldC52YWx1ZSA9ICcwJy5yZXBlYXQoNCAtIHZhbG9yLnN1YnN0cmluZygwLCBndWlvbikubGVuZ3RoKSArIHZhbG9yLnN1YnN0cmluZygwLCBndWlvbikgKyAnLScgKyAnMCcucmVwZWF0KDggLSB2YWxvci5zdWJzdHJpbmcoZ3Vpb24sIHZhbG9yLmxlbmd0aCkubGVuZ3RoKSArIHZhbG9yLnN1YnN0cmluZyhndWlvbiwgdmFsb3IubGVuZ3RoKTtcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKGN1cnJlbnQubGVuZ3RoID09PSA0ICYmICFjdXJyZW50LmluY2x1ZGVzKCctJykpIHtcblx0XHRcdGV2ZW50LnRhcmdldC52YWx1ZSA9IGN1cnJlbnQgKyAnLScgKyBldmVudC5rZXk7XG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblx0fVxuXG59XG4iXX0=