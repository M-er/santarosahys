/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, HostListener } from '@angular/core';
export class ComprobanteDirective {
    /**
     * @param {?} el
     */
    constructor(el) {
        this.el = el;
        // Allow decimal numbers and negative values
        this.regex = new RegExp(/^[0-9]$/g);
        // Allow key codes for special events. Reflect :
        // Backspace, tab, end, home
        this.specialKeys = ['Backspace', 'Tab', 'End', 'Home', '-', 'ArrowLeft', 'ArrowRight'];
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onKeyDown(event) {
        if (this.specialKeys.indexOf(event.key) !== -1) {
            return;
        }
        /** @type {?} */
        const esNumero = String(event.key).match(this.regex);
        /** Si no es tecla especial o número */
        if (!esNumero && event.key !== 'Enter') {
            event.preventDefault();
            return;
        }
        /** @type {?} */
        const current = this.el.nativeElement.value;
        /** @type {?} */
        const next = this.el.nativeElement.value.concat(event.key);
        /**
         * Si está seleccionado, reemplazo
         * @type {?}
         */
        const seleccionado = this.el.nativeElement.selectionStart === 0 && this.el.nativeElement.selectionEnd === current.length && current.length > 0;
        if (seleccionado && esNumero) {
            event.target.value = event.key;
            event.preventDefault();
            return;
        }
        if (next.length > 13 && event.key !== 'Enter') {
            event.preventDefault();
            return;
        }
        if (event.key === 'Enter') {
            /** @type {?} */
            const guion = current.indexOf('-');
            if (guion === -1) {
                event.target.value = '0000-' + '0'.repeat(8 - current.length) + current;
            }
            else {
                /** @type {?} */
                const valor = current.replace('-', '');
                event.target.value = '0'.repeat(4 - valor.substring(0, guion).length) + valor.substring(0, guion) + '-' + '0'.repeat(8 - valor.substring(guion, valor.length).length) + valor.substring(guion, valor.length);
            }
        }
        else if (current.length === 4 && !current.includes('-')) {
            event.target.value = current + '-' + event.key;
            event.preventDefault();
        }
    }
}
ComprobanteDirective.decorators = [
    { type: Directive, args: [{
                selector: '[trComprobante]'
            },] }
];
/** @nocollapse */
ComprobanteDirective.ctorParameters = () => [
    { type: ElementRef }
];
ComprobanteDirective.propDecorators = {
    onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ComprobanteDirective.prototype.regex;
    /**
     * @type {?}
     * @private
     */
    ComprobanteDirective.prototype.specialKeys;
    /**
     * @type {?}
     * @private
     */
    ComprobanteDirective.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcHJvYmFudGUuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRyZXMtZXJyZXMvbmd4LXV0aWxzLyIsInNvdXJjZXMiOlsibGliL2NvbXByb2JhbnRlLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBS3BFLE1BQU0sT0FBTyxvQkFBb0I7Ozs7SUFFaEMsWUFDUyxFQUFjO1FBQWQsT0FBRSxHQUFGLEVBQUUsQ0FBWTs7UUFJZixVQUFLLEdBQVcsSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7OztRQUl2QyxnQkFBVyxHQUFrQixDQUFDLFdBQVcsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsV0FBVyxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBUHJHLENBQUM7Ozs7O0lBVUwsU0FBUyxDQUFDLEtBQVU7UUFDbkIsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7WUFDL0MsT0FBTztTQUNQOztjQUVLLFFBQVEsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBRXBELHVDQUF1QztRQUN2QyxJQUFJLENBQUMsUUFBUSxJQUFJLEtBQUssQ0FBQyxHQUFHLEtBQUssT0FBTyxFQUFFO1lBQ3ZDLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUN2QixPQUFPO1NBQ1A7O2NBRUssT0FBTyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLEtBQUs7O2NBQ3JDLElBQUksR0FBVyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7Ozs7O2NBRzVELFlBQVksR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxjQUFjLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLFlBQVksS0FBSyxPQUFPLENBQUMsTUFBTSxJQUFJLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQztRQUM5SSxJQUFJLFlBQVksSUFBSSxRQUFRLEVBQUU7WUFDN0IsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQztZQUMvQixLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDdkIsT0FBTztTQUNQO1FBRUQsSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLEVBQUUsSUFBSSxLQUFLLENBQUMsR0FBRyxLQUFLLE9BQU8sRUFBRTtZQUM5QyxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDdkIsT0FBTztTQUNQO1FBRUQsSUFBSSxLQUFLLENBQUMsR0FBRyxLQUFLLE9BQU8sRUFBRTs7a0JBQ3BCLEtBQUssR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQztZQUNsQyxJQUFJLEtBQUssS0FBSyxDQUFDLENBQUMsRUFBRTtnQkFDakIsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsT0FBTyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxPQUFPLENBQUM7YUFDeEU7aUJBQU07O3NCQUNBLEtBQUssR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUM7Z0JBQ3RDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQzdNO1NBQ0Q7YUFBTSxJQUFJLE9BQU8sQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUMxRCxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxPQUFPLEdBQUcsR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUM7WUFDL0MsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1NBQ3ZCO0lBQ0YsQ0FBQzs7O1lBMURELFNBQVMsU0FBQztnQkFDVixRQUFRLEVBQUUsaUJBQWlCO2FBQzNCOzs7O1lBSm1CLFVBQVU7Ozt3QkFrQjVCLFlBQVksU0FBQyxTQUFTLEVBQUUsQ0FBQyxRQUFRLENBQUM7Ozs7Ozs7SUFObkMscUNBQStDOzs7OztJQUkvQywyQ0FBeUc7Ozs7O0lBUnhHLGtDQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSG9zdExpc3RlbmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBEaXJlY3RpdmUoe1xuXHRzZWxlY3RvcjogJ1t0ckNvbXByb2JhbnRlXSdcbn0pXG5leHBvcnQgY2xhc3MgQ29tcHJvYmFudGVEaXJlY3RpdmUge1xuXG5cdGNvbnN0cnVjdG9yKFxuXHRcdHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsXG5cdCkgeyB9XG5cblx0Ly8gQWxsb3cgZGVjaW1hbCBudW1iZXJzIGFuZCBuZWdhdGl2ZSB2YWx1ZXNcblx0cHJpdmF0ZSByZWdleDogUmVnRXhwID0gbmV3IFJlZ0V4cCgvXlswLTldJC9nKTtcblxuXHQvLyBBbGxvdyBrZXkgY29kZXMgZm9yIHNwZWNpYWwgZXZlbnRzLiBSZWZsZWN0IDpcblx0Ly8gQmFja3NwYWNlLCB0YWIsIGVuZCwgaG9tZVxuXHRwcml2YXRlIHNwZWNpYWxLZXlzOiBBcnJheTxzdHJpbmc+ID0gWydCYWNrc3BhY2UnLCAnVGFiJywgJ0VuZCcsICdIb21lJywgJy0nLCAnQXJyb3dMZWZ0JywgJ0Fycm93UmlnaHQnXTtcblxuXHRASG9zdExpc3RlbmVyKCdrZXlkb3duJywgWyckZXZlbnQnXSlcblx0b25LZXlEb3duKGV2ZW50OiBhbnkpIHtcblx0XHRpZiAodGhpcy5zcGVjaWFsS2V5cy5pbmRleE9mKGV2ZW50LmtleSkgIT09IC0xKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y29uc3QgZXNOdW1lcm8gPSBTdHJpbmcoZXZlbnQua2V5KS5tYXRjaCh0aGlzLnJlZ2V4KTtcblxuXHRcdC8qKiBTaSBubyBlcyB0ZWNsYSBlc3BlY2lhbCBvIG7Dum1lcm8gKi9cblx0XHRpZiAoIWVzTnVtZXJvICYmIGV2ZW50LmtleSAhPT0gJ0VudGVyJykge1xuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb25zdCBjdXJyZW50ID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LnZhbHVlO1xuXHRcdGNvbnN0IG5leHQ6IHN0cmluZyA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC52YWx1ZS5jb25jYXQoZXZlbnQua2V5KTtcblxuXHRcdC8qKiBTaSBlc3TDoSBzZWxlY2Npb25hZG8sIHJlZW1wbGF6byAqL1xuXHRcdGNvbnN0IHNlbGVjY2lvbmFkbyA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5zZWxlY3Rpb25TdGFydCA9PT0gMCAmJiB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuc2VsZWN0aW9uRW5kID09PSBjdXJyZW50Lmxlbmd0aCAmJiBjdXJyZW50Lmxlbmd0aCA+IDA7XG5cdFx0aWYgKHNlbGVjY2lvbmFkbyAmJiBlc051bWVybykge1xuXHRcdFx0ZXZlbnQudGFyZ2V0LnZhbHVlID0gZXZlbnQua2V5O1xuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAobmV4dC5sZW5ndGggPiAxMyAmJiBldmVudC5rZXkgIT09ICdFbnRlcicpIHtcblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKGV2ZW50LmtleSA9PT0gJ0VudGVyJykge1xuXHRcdFx0Y29uc3QgZ3Vpb24gPSBjdXJyZW50LmluZGV4T2YoJy0nKTtcblx0XHRcdGlmIChndWlvbiA9PT0gLTEpIHtcblx0XHRcdFx0ZXZlbnQudGFyZ2V0LnZhbHVlID0gJzAwMDAtJyArICcwJy5yZXBlYXQoOCAtIGN1cnJlbnQubGVuZ3RoKSArIGN1cnJlbnQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjb25zdCB2YWxvciA9IGN1cnJlbnQucmVwbGFjZSgnLScsICcnKTtcblx0XHRcdFx0ZXZlbnQudGFyZ2V0LnZhbHVlID0gJzAnLnJlcGVhdCg0IC0gdmFsb3Iuc3Vic3RyaW5nKDAsIGd1aW9uKS5sZW5ndGgpICsgdmFsb3Iuc3Vic3RyaW5nKDAsIGd1aW9uKSArICctJyArICcwJy5yZXBlYXQoOCAtIHZhbG9yLnN1YnN0cmluZyhndWlvbiwgdmFsb3IubGVuZ3RoKS5sZW5ndGgpICsgdmFsb3Iuc3Vic3RyaW5nKGd1aW9uLCB2YWxvci5sZW5ndGgpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAoY3VycmVudC5sZW5ndGggPT09IDQgJiYgIWN1cnJlbnQuaW5jbHVkZXMoJy0nKSkge1xuXHRcdFx0ZXZlbnQudGFyZ2V0LnZhbHVlID0gY3VycmVudCArICctJyArIGV2ZW50LmtleTtcblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0fVxuXHR9XG5cbn1cbiJdfQ==