/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
export class NumformPipe {
    /**
     * @param {?} valor
     * @param {?=} borrarceros
     * @param {?=} sepmil
     * @param {?=} sepdec
     * @return {?}
     */
    transform(valor, borrarceros = false, sepmil = ',', sepdec = '.') {
        /** @type {?} */
        let encero = '';
        if (!borrarceros) {
            encero = '0.00';
        }
        if (!valor || isNaN(valor)) {
            valor = 0;
        }
        valor = valor.toString().replace(/\$|\,/g, '');
        if (valor === 0) {
            return encero;
        }
        /** @type {?} */
        const sign = (Number.parseFloat(valor) === Math.abs(Number.parseFloat(valor)));
        valor = Math.abs(Number.parseFloat(valor));
        valor = Math.floor((Number.parseFloat(valor) * 100) + 0.50000000001);
        /** @type {?} */
        let cents = valor % 100;
        if (cents < 10) {
            cents = '0' + cents;
        }
        valor = Math.floor(valor / 100).toString();
        for (let i = 0; i < Math.floor((valor.length - (1 + i)) / 3); i++) {
            valor = valor.substring(0, valor.length - (4 * i + 3)) + sepmil + valor.substring(valor.length - (4 * i + 3));
        }
        return (((sign) ? '' : '-') + valor + sepdec + cents);
    }
}
NumformPipe.decorators = [
    { type: Pipe, args: [{
                name: 'numform'
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVtZm9ybS5waXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRyZXMtZXJyZXMvbmd4LXV0aWxzLyIsInNvdXJjZXMiOlsibGliL251bWZvcm0ucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFLcEQsTUFBTSxPQUFPLFdBQVc7Ozs7Ozs7O0lBRXZCLFNBQVMsQ0FDUixLQUFVLEVBQ1YsY0FBdUIsS0FBSyxFQUM1QixTQUFpQixHQUFHLEVBQ3BCLFNBQWlCLEdBQUc7O1lBRWhCLE1BQU0sR0FBRyxFQUFFO1FBQ2YsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUFFLE1BQU0sR0FBRyxNQUFNLENBQUM7U0FBRTtRQUN0QyxJQUFJLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUFFLEtBQUssR0FBRyxDQUFDLENBQUM7U0FBRTtRQUMxQyxLQUFLLEdBQUcsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDL0MsSUFBSSxLQUFLLEtBQUssQ0FBQyxFQUFFO1lBQUUsT0FBTyxNQUFNLENBQUM7U0FBRTs7Y0FDN0IsSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUM5RSxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDM0MsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLGFBQWEsQ0FBQyxDQUFDOztZQUNqRSxLQUFLLEdBQVEsS0FBSyxHQUFHLEdBQUc7UUFDNUIsSUFBSSxLQUFLLEdBQUcsRUFBRSxFQUFFO1lBQ2YsS0FBSyxHQUFHLEdBQUcsR0FBRyxLQUFLLENBQUM7U0FDcEI7UUFDRCxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDM0MsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDbEUsS0FBSyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUM5RztRQUNELE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxHQUFHLE1BQU0sR0FBRyxLQUFLLENBQUMsQ0FBQztJQUN2RCxDQUFDOzs7WUE1QkQsSUFBSSxTQUFDO2dCQUNMLElBQUksRUFBRSxTQUFTO2FBQ2YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBQaXBlKHtcblx0bmFtZTogJ251bWZvcm0nXG59KVxuZXhwb3J0IGNsYXNzIE51bWZvcm1QaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG5cblx0dHJhbnNmb3JtKFxuXHRcdHZhbG9yOiBhbnksXG5cdFx0Ym9ycmFyY2Vyb3M6IGJvb2xlYW4gPSBmYWxzZSxcblx0XHRzZXBtaWw6IHN0cmluZyA9ICcsJyxcblx0XHRzZXBkZWM6IHN0cmluZyA9ICcuJ1xuXHQpOiBhbnkge1xuXHRcdGxldCBlbmNlcm8gPSAnJztcblx0XHRpZiAoIWJvcnJhcmNlcm9zKSB7IGVuY2VybyA9ICcwLjAwJzsgfVxuXHRcdGlmICghdmFsb3IgfHwgaXNOYU4odmFsb3IpKSB7IHZhbG9yID0gMDsgfVxuXHRcdHZhbG9yID0gdmFsb3IudG9TdHJpbmcoKS5yZXBsYWNlKC9cXCR8XFwsL2csICcnKTtcblx0XHRpZiAodmFsb3IgPT09IDApIHsgcmV0dXJuIGVuY2VybzsgfVxuXHRcdGNvbnN0IHNpZ24gPSAoTnVtYmVyLnBhcnNlRmxvYXQodmFsb3IpID09PSBNYXRoLmFicyhOdW1iZXIucGFyc2VGbG9hdCh2YWxvcikpKTtcblx0XHR2YWxvciA9IE1hdGguYWJzKE51bWJlci5wYXJzZUZsb2F0KHZhbG9yKSk7XG5cdFx0dmFsb3IgPSBNYXRoLmZsb29yKChOdW1iZXIucGFyc2VGbG9hdCh2YWxvcikgKiAxMDApICsgMC41MDAwMDAwMDAwMSk7XG5cdFx0bGV0IGNlbnRzOiBhbnkgPSB2YWxvciAlIDEwMDtcblx0XHRpZiAoY2VudHMgPCAxMCkge1xuXHRcdFx0Y2VudHMgPSAnMCcgKyBjZW50cztcblx0XHR9XG5cdFx0dmFsb3IgPSBNYXRoLmZsb29yKHZhbG9yIC8gMTAwKS50b1N0cmluZygpO1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgTWF0aC5mbG9vcigodmFsb3IubGVuZ3RoIC0gKDEgKyBpKSkgLyAzKTsgaSsrKSB7XG5cdFx0XHR2YWxvciA9IHZhbG9yLnN1YnN0cmluZygwLCB2YWxvci5sZW5ndGggLSAoNCAqIGkgKyAzKSkgKyBzZXBtaWwgKyB2YWxvci5zdWJzdHJpbmcodmFsb3IubGVuZ3RoIC0gKDQgKiBpICsgMykpO1xuXHRcdH1cblx0XHRyZXR1cm4gKCgoc2lnbikgPyAnJyA6ICctJykgKyB2YWxvciArIHNlcGRlYyArIGNlbnRzKTtcblx0fVxuXG59XG4iXX0=