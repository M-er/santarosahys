/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, HostListener } from '@angular/core';
import { MatSnackBar } from '@angular/material';
export class CuitDirective {
    /**
     * @param {?} el
     * @param {?} snackBar
     */
    constructor(el, snackBar) {
        this.el = el;
        this.snackBar = snackBar;
        // Allow decimal numbers and negative values
        this.regex = new RegExp(/^[0-9]$/g);
        // Allow key codes for special events. Reflect :
        // Backspace, tab, end, home
        this.specialKeys = ['Tab', 'End', 'Home', '-', 'ArrowLeft', 'ArrowRight'];
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onKeyDown(event) {
        if (this.specialKeys.indexOf(event.key) !== -1) {
            return;
        }
        /** @type {?} */
        const esNumero = String(event.key).match(this.regex);
        /** Si no es tecla especial o número */
        if (!esNumero && event.key !== 'Enter' && event.key !== '-' && event.key !== 'Backspace') {
            event.preventDefault();
            return;
        }
        /** @type {?} */
        const current = this.el.nativeElement.value;
        /** @type {?} */
        const next = this.el.nativeElement.value.concat(event.key);
        /**
         * Si está seleccionado, reemplazo
         * @type {?}
         */
        const seleccionado = this.el.nativeElement.selectionStart === 0 && this.el.nativeElement.selectionEnd === current.length && current.length > 0;
        if (seleccionado && esNumero) {
            event.target.value = event.key;
            event.preventDefault();
            return;
        }
        if (next.length > 13 && event.key !== 'Enter' && event.key !== 'Backspace') {
            event.preventDefault();
            return;
        }
        if (event.key === 'Backspace' && current.length > 0) {
            if (current.substring(current.length - 1, current.length) === '-') {
                event.target.value = current.substring(0, current.length - 2);
            }
            else {
                return;
            }
        }
        else if (esNumero) {
            if (next.length === 2 || next.length === 11) {
                event.target.value = current + event.key + '-';
            }
            else {
                event.target.value = current + event.key;
            }
        }
        else if (event.key === 'Enter') {
            // Debe comenzar en 20/23/27/30/33
            // Si el jj es 10 debe comenzar en 23 o 33
            /** @type {?} */
            const cuitsposibles = [20, 23, 27, 30, 33];
            /** @type {?} */
            const error = { msg: '', pos: 0 };
            /** @type {?} */
            let reto = (Number.parseInt(current.substr(10, 1), 10) * 2) + (Number.parseInt(current.substr(9, 1), 10) * 3) + (Number.parseInt(current.substr(8, 1), 10) * 4) + (Number.parseInt(current.substr(7, 1), 10) * 5);
            reto += (Number.parseInt(current.substr(6, 1), 10) * 6) + (Number.parseInt(current.substr(5, 1), 10) * 7) + (Number.parseInt(current.substr(4, 1), 10) * 2) + (Number.parseInt(current.substr(3, 1), 10) * 3);
            reto += (Number.parseInt(current.substr(1, 1), 10) * 4) + (Number.parseInt(current.substr(0, 1), 10) * 5);
            /** @type {?} */
            let jj = reto % 11;
            if (jj !== 0) {
                jj = 11 - jj;
            }
            if (current.length !== 13) {
                error.msg = 'El CUIT debe contener 13 números';
                error.pos = 13;
            }
            else if (jj === 10 || cuitsposibles.indexOf(Number(current.substr(0, 2))) === -1) {
                error.msg = 'CUIT incorrecto';
                error.pos = 0;
            }
            else if (jj !== Number.parseInt(current.substr(12, 1), 10)) {
                error.msg = 'El CUIT debería terminar en "' + jj + '"';
                error.pos = event.target.value.length - 1;
            }
            if (error.msg.length) {
                setTimeout(() => {
                    this.snackBar.open(error.msg, 'Cerrar', {
                        duration: 5 * 1000,
                        panelClass: 'snack',
                        verticalPosition: 'bottom',
                        horizontalPosition: 'start'
                    });
                    event.target.value = event.target.value.substr(0, error.pos);
                    event.target.focus();
                    event.target.selectionStart = event.target.selectionEnd = event.target.value.length;
                }, 100);
            }
        }
        event.preventDefault();
    }
}
CuitDirective.decorators = [
    { type: Directive, args: [{
                selector: '[trCuit]'
            },] }
];
/** @nocollapse */
CuitDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: MatSnackBar }
];
CuitDirective.propDecorators = {
    onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    CuitDirective.prototype.regex;
    /**
     * @type {?}
     * @private
     */
    CuitDirective.prototype.specialKeys;
    /**
     * @type {?}
     * @private
     */
    CuitDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    CuitDirective.prototype.snackBar;
}
//# sourceMappingURL=data:application/json;base64,