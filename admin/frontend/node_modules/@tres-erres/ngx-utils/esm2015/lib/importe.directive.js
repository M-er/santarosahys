/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, HostListener } from '@angular/core';
export class ImporteDirective {
    /**
     * @param {?} el
     */
    constructor(el) {
        this.el = el;
        // Allow decimal numbers and negative values
        this.regex = new RegExp(/^-?[0-9]+(\.[0-9]*){0,1}$/g);
        // Allow key codes for special events. Reflect :
        // Backspace, tab, end, home
        this.specialKeys = ['Backspace', 'Tab', 'End', 'Home', '-', 'ArrowLeft', 'ArrowRight'];
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onKeyDown(event) {
        /** @type {?} */
        const current = this.el.nativeElement.value;
        // Autocompletar decimal
        if (event.key === '.') {
            if (current.length === 0) {
                event.target.value = '0.';
                event.preventDefault();
                return;
            }
            else if (current === '-') {
                event.target.value = '-0.';
                event.preventDefault();
                return;
            }
        }
        // No permitir otro menos que no sea al principio
        if (event.key === '-' && current.length > 0) {
            event.preventDefault();
        }
        // Allow Backspace, tab, end, and home keys
        if (this.specialKeys.indexOf(event.key) !== -1) {
            return;
        }
        // No permitir mÃ¡s de 2 decimales
        if (current.indexOf('.') !== -1) {
            /** @type {?} */
            const decimales = current.split('.')[1];
            if (decimales.length > 1) {
                event.preventDefault();
            }
        }
        /** @type {?} */
        const next = current.concat(event.key);
        if (next && !String(next).match(this.regex)) {
            event.preventDefault();
        }
    }
}
ImporteDirective.decorators = [
    { type: Directive, args: [{
                selector: '[trImporte]'
            },] }
];
/** @nocollapse */
ImporteDirective.ctorParameters = () => [
    { type: ElementRef }
];
ImporteDirective.propDecorators = {
    onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ImporteDirective.prototype.regex;
    /**
     * @type {?}
     * @private
     */
    ImporteDirective.prototype.specialKeys;
    /**
     * @type {?}
     * @private
     */
    ImporteDirective.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1wb3J0ZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdHJlcy1lcnJlcy9uZ3gtdXRpbHMvIiwic291cmNlcyI6WyJsaWIvaW1wb3J0ZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUtwRSxNQUFNLE9BQU8sZ0JBQWdCOzs7O0lBRTVCLFlBQ1MsRUFBYztRQUFkLE9BQUUsR0FBRixFQUFFLENBQVk7O1FBSWYsVUFBSyxHQUFXLElBQUksTUFBTSxDQUFDLDRCQUE0QixDQUFDLENBQUM7OztRQUl6RCxnQkFBVyxHQUFrQixDQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsV0FBVyxFQUFFLFlBQVksQ0FBRSxDQUFDO0lBUHZHLENBQUM7Ozs7O0lBVUwsU0FBUyxDQUFDLEtBQVU7O2NBQ2IsT0FBTyxHQUFXLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLEtBQUs7UUFFbkQsd0JBQXdCO1FBQ3hCLElBQUksS0FBSyxDQUFDLEdBQUcsS0FBSyxHQUFHLEVBQUU7WUFDdEIsSUFBSSxPQUFPLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtnQkFDekIsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO2dCQUMxQixLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7Z0JBQ3ZCLE9BQU87YUFDUDtpQkFBTSxJQUFJLE9BQU8sS0FBSyxHQUFHLEVBQUU7Z0JBQzNCLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztnQkFDM0IsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO2dCQUN2QixPQUFPO2FBQ1A7U0FDRDtRQUVELGlEQUFpRDtRQUNqRCxJQUFJLEtBQUssQ0FBQyxHQUFHLEtBQUssR0FBRyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQzVDLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztTQUN2QjtRQUVELDJDQUEyQztRQUMzQyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtZQUMvQyxPQUFPO1NBQ1A7UUFFRCxpQ0FBaUM7UUFDakMsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFOztrQkFDMUIsU0FBUyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3ZDLElBQUksU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7Z0JBQ3pCLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQzthQUN2QjtTQUNEOztjQUVLLElBQUksR0FBVyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7UUFDOUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUM1QyxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7U0FDdkI7SUFDRixDQUFDOzs7WUF2REQsU0FBUyxTQUFDO2dCQUNWLFFBQVEsRUFBRSxhQUFhO2FBQ3ZCOzs7O1lBSm1CLFVBQVU7Ozt3QkFrQjVCLFlBQVksU0FBQyxTQUFTLEVBQUUsQ0FBRSxRQUFRLENBQUU7Ozs7Ozs7SUFOckMsaUNBQWlFOzs7OztJQUlqRSx1Q0FBMkc7Ozs7O0lBUjFHLDhCQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSG9zdExpc3RlbmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBEaXJlY3RpdmUoe1xuXHRzZWxlY3RvcjogJ1t0ckltcG9ydGVdJ1xufSlcbmV4cG9ydCBjbGFzcyBJbXBvcnRlRGlyZWN0aXZlIHtcblxuXHRjb25zdHJ1Y3Rvcihcblx0XHRwcml2YXRlIGVsOiBFbGVtZW50UmVmXG5cdCkgeyB9XG5cblx0Ly8gQWxsb3cgZGVjaW1hbCBudW1iZXJzIGFuZCBuZWdhdGl2ZSB2YWx1ZXNcblx0cHJpdmF0ZSByZWdleDogUmVnRXhwID0gbmV3IFJlZ0V4cCgvXi0/WzAtOV0rKFxcLlswLTldKil7MCwxfSQvZyk7XG5cblx0Ly8gQWxsb3cga2V5IGNvZGVzIGZvciBzcGVjaWFsIGV2ZW50cy4gUmVmbGVjdCA6XG5cdC8vIEJhY2tzcGFjZSwgdGFiLCBlbmQsIGhvbWVcblx0cHJpdmF0ZSBzcGVjaWFsS2V5czogQXJyYXk8c3RyaW5nPiA9IFsgJ0JhY2tzcGFjZScsICdUYWInLCAnRW5kJywgJ0hvbWUnLCAnLScsICdBcnJvd0xlZnQnLCAnQXJyb3dSaWdodCcgXTtcblxuXHRASG9zdExpc3RlbmVyKCdrZXlkb3duJywgWyAnJGV2ZW50JyBdKVxuXHRvbktleURvd24oZXZlbnQ6IGFueSkge1xuXHRcdGNvbnN0IGN1cnJlbnQ6IHN0cmluZyA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC52YWx1ZTtcblxuXHRcdC8vIEF1dG9jb21wbGV0YXIgZGVjaW1hbFxuXHRcdGlmIChldmVudC5rZXkgPT09ICcuJykge1xuXHRcdFx0aWYgKGN1cnJlbnQubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRcdGV2ZW50LnRhcmdldC52YWx1ZSA9ICcwLic7XG5cdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH0gZWxzZSBpZiAoY3VycmVudCA9PT0gJy0nKSB7XG5cdFx0XHRcdGV2ZW50LnRhcmdldC52YWx1ZSA9ICctMC4nO1xuXHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gTm8gcGVybWl0aXIgb3RybyBtZW5vcyBxdWUgbm8gc2VhIGFsIHByaW5jaXBpb1xuXHRcdGlmIChldmVudC5rZXkgPT09ICctJyAmJiBjdXJyZW50Lmxlbmd0aCA+IDApIHtcblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsb3cgQmFja3NwYWNlLCB0YWIsIGVuZCwgYW5kIGhvbWUga2V5c1xuXHRcdGlmICh0aGlzLnNwZWNpYWxLZXlzLmluZGV4T2YoZXZlbnQua2V5KSAhPT0gLTEpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBObyBwZXJtaXRpciBtw6FzIGRlIDIgZGVjaW1hbGVzXG5cdFx0aWYgKGN1cnJlbnQuaW5kZXhPZignLicpICE9PSAtMSkge1xuXHRcdFx0Y29uc3QgZGVjaW1hbGVzID0gY3VycmVudC5zcGxpdCgnLicpWzFdO1xuXHRcdFx0aWYgKGRlY2ltYWxlcy5sZW5ndGggPiAxKSB7XG5cdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Y29uc3QgbmV4dDogc3RyaW5nID0gY3VycmVudC5jb25jYXQoZXZlbnQua2V5KTtcblx0XHRpZiAobmV4dCAmJiAhU3RyaW5nKG5leHQpLm1hdGNoKHRoaXMucmVnZXgpKSB7XG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblx0fVxuXG59XG4iXX0=