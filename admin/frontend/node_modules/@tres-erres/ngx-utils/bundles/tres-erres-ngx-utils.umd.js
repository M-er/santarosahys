(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/material'), require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@tres-erres/ngx-utils', ['exports', '@angular/material', '@angular/core', '@angular/common'], factory) :
    (factory((global['tres-erres'] = global['tres-erres'] || {}, global['tres-erres']['ngx-utils'] = {}),global.ng.material,global.ng.core,global.ng.common));
}(this, (function (exports,material,core,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ImporteDirective = /** @class */ (function () {
        function ImporteDirective(el) {
            this.el = el;
            // Allow decimal numbers and negative values
            this.regex = new RegExp(/^-?[0-9]+(\.[0-9]*){0,1}$/g);
            // Allow key codes for special events. Reflect :
            // Backspace, tab, end, home
            this.specialKeys = ['Backspace', 'Tab', 'End', 'Home', '-', 'ArrowLeft', 'ArrowRight'];
        }
        /**
         * @param {?} event
         * @return {?}
         */
        ImporteDirective.prototype.onKeyDown = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                /** @type {?} */
                var current = this.el.nativeElement.value;
                // Autocompletar decimal
                if (event.key === '.') {
                    if (current.length === 0) {
                        event.target.value = '0.';
                        event.preventDefault();
                        return;
                    }
                    else if (current === '-') {
                        event.target.value = '-0.';
                        event.preventDefault();
                        return;
                    }
                }
                // No permitir otro menos que no sea al principio
                if (event.key === '-' && current.length > 0) {
                    event.preventDefault();
                }
                // Allow Backspace, tab, end, and home keys
                if (this.specialKeys.indexOf(event.key) !== -1) {
                    return;
                }
                // No permitir más de 2 decimales
                if (current.indexOf('.') !== -1) {
                    /** @type {?} */
                    var decimales = current.split('.')[1];
                    if (decimales.length > 1) {
                        event.preventDefault();
                    }
                }
                /** @type {?} */
                var next = current.concat(event.key);
                if (next && !String(next).match(this.regex)) {
                    event.preventDefault();
                }
            };
        ImporteDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[trImporte]'
                    },] }
        ];
        /** @nocollapse */
        ImporteDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef }
            ];
        };
        ImporteDirective.propDecorators = {
            onKeyDown: [{ type: core.HostListener, args: ['keydown', ['$event'],] }]
        };
        return ImporteDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CuitDirective = /** @class */ (function () {
        function CuitDirective(el, snackBar) {
            this.el = el;
            this.snackBar = snackBar;
            // Allow decimal numbers and negative values
            this.regex = new RegExp(/^[0-9]$/g);
            // Allow key codes for special events. Reflect :
            // Backspace, tab, end, home
            this.specialKeys = ['Tab', 'End', 'Home', '-', 'ArrowLeft', 'ArrowRight'];
        }
        /**
         * @param {?} event
         * @return {?}
         */
        CuitDirective.prototype.onKeyDown = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                var _this = this;
                if (this.specialKeys.indexOf(event.key) !== -1) {
                    return;
                }
                /** @type {?} */
                var esNumero = String(event.key).match(this.regex);
                /** Si no es tecla especial o número */
                if (!esNumero && event.key !== 'Enter' && event.key !== '-' && event.key !== 'Backspace') {
                    event.preventDefault();
                    return;
                }
                /** @type {?} */
                var current = this.el.nativeElement.value;
                /** @type {?} */
                var next = this.el.nativeElement.value.concat(event.key);
                /**
                 * Si está seleccionado, reemplazo
                 * @type {?}
                 */
                var seleccionado = this.el.nativeElement.selectionStart === 0 && this.el.nativeElement.selectionEnd === current.length && current.length > 0;
                if (seleccionado && esNumero) {
                    event.target.value = event.key;
                    event.preventDefault();
                    return;
                }
                if (next.length > 13 && event.key !== 'Enter' && event.key !== 'Backspace') {
                    event.preventDefault();
                    return;
                }
                if (event.key === 'Backspace' && current.length > 0) {
                    if (current.substring(current.length - 1, current.length) === '-') {
                        event.target.value = current.substring(0, current.length - 2);
                    }
                    else {
                        return;
                    }
                }
                else if (esNumero) {
                    if (next.length === 2 || next.length === 11) {
                        event.target.value = current + event.key + '-';
                    }
                    else {
                        event.target.value = current + event.key;
                    }
                }
                else if (event.key === 'Enter') {
                    // Debe comenzar en 20/23/27/30/33
                    // Si el jj es 10 debe comenzar en 23 o 33
                    /** @type {?} */
                    var cuitsposibles = [20, 23, 27, 30, 33];
                    /** @type {?} */
                    var error_1 = { msg: '', pos: 0 };
                    /** @type {?} */
                    var reto = (Number.parseInt(current.substr(10, 1), 10) * 2) + (Number.parseInt(current.substr(9, 1), 10) * 3) + (Number.parseInt(current.substr(8, 1), 10) * 4) + (Number.parseInt(current.substr(7, 1), 10) * 5);
                    reto += (Number.parseInt(current.substr(6, 1), 10) * 6) + (Number.parseInt(current.substr(5, 1), 10) * 7) + (Number.parseInt(current.substr(4, 1), 10) * 2) + (Number.parseInt(current.substr(3, 1), 10) * 3);
                    reto += (Number.parseInt(current.substr(1, 1), 10) * 4) + (Number.parseInt(current.substr(0, 1), 10) * 5);
                    /** @type {?} */
                    var jj = reto % 11;
                    if (jj !== 0) {
                        jj = 11 - jj;
                    }
                    if (current.length !== 13) {
                        error_1.msg = 'El CUIT debe contener 13 números';
                        error_1.pos = 13;
                    }
                    else if (jj === 10 || cuitsposibles.indexOf(Number(current.substr(0, 2))) === -1) {
                        error_1.msg = 'CUIT incorrecto';
                        error_1.pos = 0;
                    }
                    else if (jj !== Number.parseInt(current.substr(12, 1), 10)) {
                        error_1.msg = 'El CUIT debería terminar en "' + jj + '"';
                        error_1.pos = event.target.value.length - 1;
                    }
                    if (error_1.msg.length) {
                        setTimeout(function () {
                            _this.snackBar.open(error_1.msg, 'Cerrar', {
                                duration: 5 * 1000,
                                panelClass: 'snack',
                                verticalPosition: 'bottom',
                                horizontalPosition: 'start'
                            });
                            event.target.value = event.target.value.substr(0, error_1.pos);
                            event.target.focus();
                            event.target.selectionStart = event.target.selectionEnd = event.target.value.length;
                        }, 100);
                    }
                }
                event.preventDefault();
            };
        CuitDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[trCuit]'
                    },] }
        ];
        /** @nocollapse */
        CuitDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: material.MatSnackBar }
            ];
        };
        CuitDirective.propDecorators = {
            onKeyDown: [{ type: core.HostListener, args: ['keydown', ['$event'],] }]
        };
        return CuitDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ComprobanteDirective = /** @class */ (function () {
        function ComprobanteDirective(el) {
            this.el = el;
            // Allow decimal numbers and negative values
            this.regex = new RegExp(/^[0-9]$/g);
            // Allow key codes for special events. Reflect :
            // Backspace, tab, end, home
            this.specialKeys = ['Backspace', 'Tab', 'End', 'Home', '-', 'ArrowLeft', 'ArrowRight'];
        }
        /**
         * @param {?} event
         * @return {?}
         */
        ComprobanteDirective.prototype.onKeyDown = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (this.specialKeys.indexOf(event.key) !== -1) {
                    return;
                }
                /** @type {?} */
                var esNumero = String(event.key).match(this.regex);
                /** Si no es tecla especial o número */
                if (!esNumero && event.key !== 'Enter') {
                    event.preventDefault();
                    return;
                }
                /** @type {?} */
                var current = this.el.nativeElement.value;
                /** @type {?} */
                var next = this.el.nativeElement.value.concat(event.key);
                /**
                 * Si está seleccionado, reemplazo
                 * @type {?}
                 */
                var seleccionado = this.el.nativeElement.selectionStart === 0 && this.el.nativeElement.selectionEnd === current.length && current.length > 0;
                if (seleccionado && esNumero) {
                    event.target.value = event.key;
                    event.preventDefault();
                    return;
                }
                if (next.length > 13 && event.key !== 'Enter') {
                    event.preventDefault();
                    return;
                }
                if (event.key === 'Enter') {
                    /** @type {?} */
                    var guion = current.indexOf('-');
                    if (guion === -1) {
                        event.target.value = '0000-' + '0'.repeat(8 - current.length) + current;
                    }
                    else {
                        /** @type {?} */
                        var valor = current.replace('-', '');
                        event.target.value = '0'.repeat(4 - valor.substring(0, guion).length) + valor.substring(0, guion) + '-' + '0'.repeat(8 - valor.substring(guion, valor.length).length) + valor.substring(guion, valor.length);
                    }
                }
                else if (current.length === 4 && !current.includes('-')) {
                    event.target.value = current + '-' + event.key;
                    event.preventDefault();
                }
            };
        ComprobanteDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[trComprobante]'
                    },] }
        ];
        /** @nocollapse */
        ComprobanteDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef }
            ];
        };
        ComprobanteDirective.propDecorators = {
            onKeyDown: [{ type: core.HostListener, args: ['keydown', ['$event'],] }]
        };
        return ComprobanteDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NumformPipe = /** @class */ (function () {
        function NumformPipe() {
        }
        /**
         * @param {?} valor
         * @param {?=} borrarceros
         * @param {?=} sepmil
         * @param {?=} sepdec
         * @return {?}
         */
        NumformPipe.prototype.transform = /**
         * @param {?} valor
         * @param {?=} borrarceros
         * @param {?=} sepmil
         * @param {?=} sepdec
         * @return {?}
         */
            function (valor, borrarceros, sepmil, sepdec) {
                if (borrarceros === void 0) {
                    borrarceros = false;
                }
                if (sepmil === void 0) {
                    sepmil = ',';
                }
                if (sepdec === void 0) {
                    sepdec = '.';
                }
                /** @type {?} */
                var encero = '';
                if (!borrarceros) {
                    encero = '0.00';
                }
                if (!valor || isNaN(valor)) {
                    valor = 0;
                }
                valor = valor.toString().replace(/\$|\,/g, '');
                if (valor === 0) {
                    return encero;
                }
                /** @type {?} */
                var sign = (Number.parseFloat(valor) === Math.abs(Number.parseFloat(valor)));
                valor = Math.abs(Number.parseFloat(valor));
                valor = Math.floor((Number.parseFloat(valor) * 100) + 0.50000000001);
                /** @type {?} */
                var cents = valor % 100;
                if (cents < 10) {
                    cents = '0' + cents;
                }
                valor = Math.floor(valor / 100).toString();
                for (var i = 0; i < Math.floor((valor.length - (1 + i)) / 3); i++) {
                    valor = valor.substring(0, valor.length - (4 * i + 3)) + sepmil + valor.substring(valor.length - (4 * i + 3));
                }
                return (((sign) ? '' : '-') + valor + sepdec + cents);
            };
        NumformPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'numform'
                    },] }
        ];
        return NumformPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UtilsModule = /** @class */ (function () {
        function UtilsModule() {
        }
        UtilsModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            ImporteDirective,
                            CuitDirective,
                            ComprobanteDirective,
                            NumformPipe
                        ],
                        imports: [
                            common.CommonModule
                        ],
                        exports: [
                            ImporteDirective,
                            CuitDirective,
                            ComprobanteDirective,
                            NumformPipe
                        ]
                    },] }
        ];
        return UtilsModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.ImporteDirective = ImporteDirective;
    exports.CuitDirective = CuitDirective;
    exports.ComprobanteDirective = ComprobanteDirective;
    exports.NumformPipe = NumformPipe;
    exports.UtilsModule = UtilsModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=tres-erres-ngx-utils.umd.js.map